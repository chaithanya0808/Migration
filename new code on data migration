BEGIN;

DO $$ 
DECLARE
    v_rows_updated BIGINT := 0;
    v_start_time TIMESTAMP;
    v_end_time TIMESTAMP;
BEGIN
    -- Record start time
    v_start_time := CURRENT_TIMESTAMP;
    RAISE NOTICE 'Starting FC_CASE update at %', v_start_time;

    -- Begin processing loop
    LOOP
        -- Perform batch update
        UPDATE fcem_data.fc_case_party_relationship
        SET case_party_fc_profile = jsonb_set(
            COALESCE(case_party_fc_profile, '{}'),
            '{party_name}',
            case_party_details->'party_name',
            true
        )
        WHERE ctid IN (
            SELECT ctid
            FROM fcem_data.fc_case_party_relationship
            WHERE case_party_details ? 'party_name'
              AND (
                  case_party_fc_profile IS NULL
                  OR NOT (case_party_fc_profile ? 'party_name')
                  OR case_party_fc_profile->>'party_name' IS NULL
              )
            LIMIT 10000  -- Batch size
        );

        -- Track rows updated
        GET DIAGNOSTICS v_rows_updated = ROW_COUNT;

        -- Exit the loop if no more rows to process
        EXIT WHEN v_rows_updated = 0;
    END LOOP;

    -- Record end time
    v_end_time := CURRENT_TIMESTAMP;

    -- Validation checks
    IF v_rows_updated = 0 THEN
        RAISE EXCEPTION 'No rows were updated in FC_CASE table';
    ELSE
        RAISE NOTICE 'Successfully updated % rows in FC_CASE table', v_rows_updated;
    END IF;

    RAISE NOTICE 'Update completed at %. Total time taken: %', 
                 v_end_time, 
                 age(v_end_time, v_start_time);

EXCEPTION
    WHEN OTHERS THEN
        -- Rollback the transaction in case of an error
        ROLLBACK;
        RAISE NOTICE 'Error occurred during update: % - %', SQLERRM, SQLSTATE;
        RAISE NOTICE 'Transaction rolled back';
        -- Re-raise the exception to propagate error
        RAISE;
END $$;

COMMIT;
