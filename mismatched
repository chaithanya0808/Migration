batch migration query to update records where party_name is either missing 
or NULL in case_party_fc_profile, without modifying existing mismatched values:

DO $$ 
DECLARE
    batch_size INTEGER := 10000; -- Adjust based on your system's performance
BEGIN
    LOOP
        -- Update a batch of rows
        UPDATE fcem_data.fc_case_party_relationship
        SET case_party_fc_profile = jsonb_set(
            COALESCE(case_party_fc_profile, '{}'), -- Initialize JSONB if NULL
            '{party_name}',                        -- Path for the `party_name` key
            case_party_details->'party_name',      -- Value from `case_party_details`
            true                                   -- Overwrite existing value
        )
        WHERE ctid IN (
            SELECT ctid
            FROM fcem_data.fc_case_party_relationship
            WHERE case_party_details ? 'party_name'  -- Ensure `party_name` exists in `case_party_details`
              AND (
                  case_party_fc_profile IS NULL                     -- JSONB column is NULL
                  OR NOT (case_party_fc_profile ? 'party_name')     -- `party_name` key is missing
                  OR case_party_fc_profile->>'party_name' IS NULL   -- `party_name` is NULL
              )
            LIMIT batch_size
        );

        -- Exit the loop when no rows are left to update
        EXIT WHEN NOT EXISTS (
            SELECT 1
            FROM fcem_data.fc_case_party_relationship
            WHERE case_party_details ? 'party_name'
              AND (
                  case_party_fc_profile IS NULL
                  OR NOT (case_party_fc_profile ? 'party_name')
                  OR case_party_fc_profile->>'party_name' IS NULL
              )
        );
    END LOOP;

    RAISE NOTICE 'Batch migration completed successfully.';
END $$;

Count Records Needing Migration:
SELECT COUNT(*)
FROM fcem_data.fc_case_party_relationship
WHERE case_party_details ? 'party_name'
  AND (
      case_party_fc_profile IS NULL
      OR NOT (case_party_fc_profile ? 'party_name')
      OR case_party_fc_profile->>'party_name' IS NULL
  );

Sample Records Needing Migration:
SELECT *
FROM fcem_data.fc_case_party_relationship
WHERE case_party_details ? 'party_name'
  AND (
      case_party_fc_profile IS NULL
      OR NOT (case_party_fc_profile ? 'party_name')
      OR case_party_fc_profile->>'party_name' IS NULL
  )
LIMIT 10;

storedprocedures:
CREATE OR REPLACE PROCEDURE batch_migrate_party_name(batch_size INTEGER DEFAULT 1000)
LANGUAGE plpgsql
AS $$
DECLARE
    rows_updated INTEGER;
BEGIN
    LOOP
        -- Perform a batch update
        UPDATE fcem_data.fc_case_party_relationship
        SET case_party_fc_profile = jsonb_set(
            COALESCE(case_party_fc_profile, '{}'), -- Ensure JSONB is initialized if NULL
            '{party_name}',                        -- Path for the `party_name` key
            case_party_details->'party_name',      -- Value from `case_party_details`
            true                                   -- Overwrite if the key exists
        )
        WHERE ctid IN (
            SELECT ctid
            FROM fcem_data.fc_case_party_relationship
            WHERE case_party_details ? 'party_name' -- Ensure `party_name` exists in `case_party_details`
              AND (
                  case_party_fc_profile IS NULL                     -- Entire `case_party_fc_profile` is NULL
                  OR NOT (case_party_fc_profile ? 'party_name')     -- `party_name` is missing in `case_party_fc_profile`
                  OR case_party_fc_profile->>'party_name' IS NULL   -- `party_name` exists but is NULL
              )
            LIMIT batch_size -- Limit the number of rows for each batch
        );

        -- Get the number of rows updated in this batch
        GET DIAGNOSTICS rows_updated = ROW_COUNT;

        -- Exit loop if no more rows are updated
        IF rows_updated = 0 THEN
            EXIT;
        END IF;
    END LOOP;

    -- Log completion
    RAISE NOTICE 'Batch migration completed successfully.';
END;
$$;


Call the procedure to start the migration:

CALL batch_migrate_party_name(1000);
